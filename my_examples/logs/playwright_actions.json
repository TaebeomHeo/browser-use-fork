{
  "session_id": "current",
  "timestamp": "2025-03-12T15:01:28.575812",
  "actions": [
    {
      "timestamp": "2025-03-12T15:00:48.467577",
      "phase": "pre_action",
      "action_type": "go_to_url",
      "selector": null,
      "xpath": null,
      "element_index": null,
      "text": null,
      "url": "https://www.google.com",
      "current_url": "about:blank",
      "element_info": {}
    },
    {
      "timestamp": "2025-03-12T15:00:51.042915",
      "phase": "post_action",
      "action_type": "go_to_url",
      "selector": null,
      "xpath": null,
      "element_index": null,
      "text": null,
      "url": "https://www.google.com",
      "current_url": "https://www.google.com/",
      "attributes": {},
      "result": "üîó  Navigated to https://www.google.com",
      "error": null,
      "changes": {},
      "additional_data": {
        "action_params": "{'url': 'https://www.google.com'}",
        "duration_ms": 2572.125,
        "page_changed": true,
        "previous_url": "about:blank",
        "previous_title": "",
        "new_url": "https://www.google.com/",
        "new_title": "Google",
        "element_details": {},
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:00:55.790033",
      "phase": "pre_action",
      "action_type": "input_text",
      "selector": "#APjFqb",
      "xpath": "//*[@id=\"APjFqb\"]",
      "element_index": 8,
      "text": "Python browser automation",
      "url": null,
      "current_url": "https://www.google.com/",
      "element_info": {
        "index": 8,
        "tag_name": "textarea",
        "xpath": "html/body/div/div[3]/form/div/div/div/div/div[2]/textarea",
        "is_visible": true,
        "is_interactive": true,
        "is_top_element": true,
        "attributes": {
          "class": "gLFyf",
          "aria-controls": "Alh6id",
          "aria-owns": "Alh6id",
          "autofocus": "",
          "title": "Í≤ÄÏÉâ",
          "value": "",
          "aria-label": "Í≤ÄÏÉâ",
          "placeholder": "",
          "aria-autocomplete": "both",
          "aria-expanded": "false",
          "aria-haspopup": "false",
          "autocapitalize": "off",
          "autocomplete": "off",
          "autocorrect": "off",
          "id": "APjFqb",
          "maxlength": "2048",
          "name": "q",
          "role": "combobox",
          "rows": "1",
          "spellcheck": "false",
          "jsaction": "paste:puy29d",
          "data-ved": "0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ39UDCAQ"
        },
        "text_content": "",
        "timestamp": "2025-03-12T15:00:55.790052",
        "id": "APjFqb",
        "class": "gLFyf",
        "name": "q",
        "value": "",
        "placeholder": "",
        "aria-label": "Í≤ÄÏÉâ",
        "role": "combobox",
        "title": "Í≤ÄÏÉâ",
        "css_selector": "#APjFqb",
        "inner_text": "",
        "has_parent": true
      }
    },
    {
      "timestamp": "2025-03-12T15:00:56.042888",
      "phase": "post_action",
      "action_type": "input_text",
      "selector": "#APjFqb",
      "xpath": "//*[@id=\"APjFqb\"]",
      "element_index": 8,
      "text": "Python browser automation",
      "url": null,
      "current_url": "https://www.google.com/",
      "attributes": {
        "id": "APjFqb",
        "class": "gLFyf",
        "name": "q",
        "value": "",
        "tag_name": "textarea",
        "text_content": "",
        "xpath": "html/body/div/div[3]/form/div/div/div/div/div[2]/textarea",
        "is_visible": true,
        "is_interactive": true,
        "is_top_element": true,
        "placeholder": "",
        "aria-label": "Í≤ÄÏÉâ",
        "role": "combobox",
        "title": "Í≤ÄÏÉâ",
        "css_selector": "#APjFqb",
        "inner_text": "",
        "has_parent": true
      },
      "result": "‚å®Ô∏è  Input \"Python browser automation\" into index 8",
      "error": null,
      "changes": {
        "timestamp": {
          "before": "2025-03-12T15:00:55.790052",
          "after": "2025-03-12T15:00:56.042904"
        }
      },
      "additional_data": {
        "action_params": "{'index': 8, 'text': 'Python browser automation'}",
        "duration_ms": 168.603,
        "page_changed": false,
        "previous_url": "https://www.google.com/",
        "previous_title": "Google",
        "new_url": "https://www.google.com/",
        "new_title": "Google",
        "element_details": {
          "index": 8,
          "tag_name": "textarea",
          "text_content": "",
          "inner_text": "",
          "is_visible": true,
          "is_enabled": true,
          "attributes": {
            "id": "APjFqb",
            "class": "gLFyf",
            "name": "q",
            "aria-label": "Í≤ÄÏÉâ",
            "role": "combobox",
            "title": "Í≤ÄÏÉâ"
          },
          "position": {
            "x": 396,
            "y": 377
          },
          "size": {
            "width": 403,
            "height": 46
          },
          "xpath": "//*[@id=\"APjFqb\"]",
          "css_selector": "#APjFqb",
          "parent_info": {
            "tag_name": "div",
            "id": null,
            "class_name": "a4bIc",
            "has_parent": true
          },
          "children_info": {
            "count": 0,
            "tags": []
          }
        },
        "post_action_element_details": {
          "is_visible": true,
          "is_enabled": true,
          "text_content": "",
          "attributes": {
            "class": "gLFyf"
          }
        }
      }
    },
    {
      "timestamp": "2025-03-12T15:01:01.819088",
      "phase": "pre_action",
      "action_type": "click_element",
      "selector": "input.gNO89b",
      "xpath": "/html/body/div[1]/div[3]/form[1]/div[1]/div[1]/div[2]/div[4]/div[6]/center[1]/input[1]",
      "element_index": 24,
      "text": null,
      "url": null,
      "current_url": "https://www.google.com/",
      "element_info": {
        "index": 24,
        "tag_name": "input",
        "xpath": "html/body/div/div[3]/form/div/div/div[2]/div[4]/div[6]/center/input",
        "is_visible": true,
        "is_interactive": true,
        "is_top_element": true,
        "attributes": {
          "class": "gNO89b",
          "value": "Google Í≤ÄÏÉâ",
          "aria-label": "Google Í≤ÄÏÉâ",
          "name": "btnK",
          "role": "button",
          "tabindex": "0",
          "type": "submit",
          "data-ved": "0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4",
          "style": ""
        },
        "text_content": "",
        "timestamp": "2025-03-12T15:01:01.819112",
        "class": "gNO89b",
        "name": "btnK",
        "type": "submit",
        "value": "Google Í≤ÄÏÉâ",
        "aria-label": "Google Í≤ÄÏÉâ",
        "role": "button",
        "css_selector": "input.gNO89b",
        "inner_text": "",
        "has_parent": true
      }
    },
    {
      "timestamp": "2025-03-12T15:01:03.365840",
      "phase": "post_action",
      "action_type": "click_element",
      "selector": "input.gNO89b",
      "xpath": "/html/body/div[1]/div[3]/form[1]/div[1]/div[1]/div[2]/div[4]/div[6]/center[1]/input[1]",
      "element_index": 24,
      "text": null,
      "url": null,
      "current_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
      "attributes": {
        "class": "gNO89b",
        "name": "btnK",
        "type": "submit",
        "value": "Google Í≤ÄÏÉâ",
        "tag_name": "input",
        "text_content": "",
        "xpath": "html/body/div/div[3]/form/div/div/div[2]/div[4]/div[6]/center/input",
        "is_visible": true,
        "is_interactive": true,
        "is_top_element": true,
        "aria-label": "Google Í≤ÄÏÉâ",
        "role": "button",
        "css_selector": "input.gNO89b",
        "inner_text": "",
        "has_parent": true
      },
      "result": "üñ±Ô∏è  Clicked button with index 24: ",
      "error": null,
      "changes": {
        "timestamp": {
          "before": "2025-03-12T15:01:01.819112",
          "after": "2025-03-12T15:01:03.365860"
        }
      },
      "additional_data": {
        "action_params": "{'index': 24}",
        "duration_ms": 1539.133,
        "page_changed": true,
        "previous_url": "https://www.google.com/",
        "previous_title": "Google",
        "new_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
        "new_title": "Python browser automation - Google Í≤ÄÏÉâ",
        "element_details": {
          "index": 24,
          "tag_name": "input",
          "text_content": "",
          "inner_text": "",
          "is_visible": true,
          "is_enabled": true,
          "attributes": {
            "class": "gNO89b",
            "name": "btnK",
            "type": "submit",
            "value": "Google Í≤ÄÏÉâ",
            "aria-label": "Google Í≤ÄÏÉâ",
            "role": "button"
          },
          "position": {
            "x": 508.953125,
            "y": 752
          },
          "size": {
            "width": 107.2578125,
            "height": 36
          },
          "xpath": "/html/body/div[1]/div[3]/form[1]/div[1]/div[1]/div[2]/div[4]/div[6]/center[1]/input[1]",
          "css_selector": "input.gNO89b",
          "parent_info": {
            "tag_name": "center",
            "id": null,
            "class_name": null,
            "has_parent": true
          },
          "children_info": {
            "count": 0,
            "tags": []
          }
        },
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:01:12.915171",
      "phase": "pre_action",
      "action_type": "click_element",
      "selector": "a.zReHs",
      "xpath": "//*[@id=\"rso\"]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]",
      "element_index": 25,
      "text": null,
      "url": null,
      "current_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
      "element_info": {
        "index": 25,
        "tag_name": "a",
        "xpath": "html/body/div[3]/div/div[12]/div/div[2]/div[2]/div/div/div/div/div/div/div/div/div/span/a",
        "is_visible": true,
        "is_interactive": true,
        "is_top_element": true,
        "attributes": {
          "jsname": "UWckNb",
          "class": "zReHs",
          "href": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
          "data-ved": "2ahUKEwjTqfvw7oOMAxUD0DQHHbFtPA8QFnoECBYQAQ",
          "ping": "/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test&ved=2ahUKEwjTqfvw7oOMAxUD0DQHHbFtPA8QFnoECBYQAQ"
        },
        "text_content": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com‚Ä∫ Guide",
        "timestamp": "2025-03-12T15:01:12.915197",
        "class": "zReHs",
        "href": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "css_selector": "a.zReHs",
        "inner_text": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com‚Ä∫ Guide",
        "has_parent": true,
        "children_count": 2,
        "children_tags": [
          "h3",
          "div"
        ]
      }
    },
    {
      "timestamp": "2025-03-12T15:01:14.165923",
      "phase": "post_action",
      "action_type": "click_element",
      "selector": "a.zReHs",
      "xpath": "//*[@id=\"rso\"]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]",
      "element_index": 25,
      "text": null,
      "url": null,
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "attributes": {
        "class": "zReHs",
        "href": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "tag_name": "a",
        "text_content": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com‚Ä∫ Guide",
        "xpath": "html/body/div[3]/div/div[12]/div/div[2]/div[2]/div/div/div/div/div/div/div/div/div/span/a",
        "is_visible": true,
        "is_interactive": true,
        "is_top_element": true,
        "css_selector": "a.zReHs",
        "inner_text": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com‚Ä∫ Guide",
        "has_parent": true,
        "children_count": 2,
        "children_tags": [
          "h3",
          "div"
        ]
      },
      "result": "üñ±Ô∏è  Clicked button with index 25: Selenium Python Tutorial (with Example)",
      "error": null,
      "changes": {
        "timestamp": {
          "before": "2025-03-12T15:01:12.915197",
          "after": "2025-03-12T15:01:14.165945"
        }
      },
      "additional_data": {
        "action_params": "{'index': 25}",
        "duration_ms": 1116.731,
        "page_changed": true,
        "previous_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
        "previous_title": "Python browser automation - Google Í≤ÄÏÉâ",
        "new_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "new_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "element_details": {
          "index": 25,
          "tag_name": "a",
          "text_content": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com ‚Ä∫ Guide",
          "inner_text": "Selenium Python Tutorial (with Example)\nBrowserStack\nhttps://www.browserstack.com ‚Ä∫ Guide",
          "is_visible": true,
          "is_enabled": true,
          "attributes": {
            "class": "zReHs",
            "href": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test"
          },
          "position": {
            "x": 90.5,
            "y": 218
          },
          "size": {
            "width": 652,
            "height": 72
          },
          "xpath": "//*[@id=\"rso\"]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]",
          "css_selector": "a.zReHs",
          "parent_info": {
            "tag_name": "span",
            "id": null,
            "class_name": null,
            "has_parent": true
          },
          "children_info": {
            "count": 2,
            "tags": [
              "h3",
              "div"
            ]
          }
        },
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:01:21.646790",
      "phase": "pre_action",
      "action_type": "extract_content",
      "selector": null,
      "xpath": null,
      "element_index": null,
      "text": null,
      "url": null,
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "element_info": {}
    },
    {
      "timestamp": "2025-03-12T15:01:21.831628",
      "phase": "post_action",
      "action_type": "extract_content",
      "selector": null,
      "xpath": null,
      "element_index": null,
      "text": null,
      "url": null,
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "attributes": {},
      "result": "üìÑ  Extracted page as text\n: HomeGuideSelenium Python Tutorial (with Example)On This PageOn This PageWhy do Developers prefer Python for writing Selenium Test Scripts?Getting Started with Selenium PythonSelenium Python Example: How to run your first Test?Interacting with Common Elements in SeleniumNavigate through HTML DOM ElementsStep 1. Locate and Interact with Navigation LinksStep 2. Access and Interact with Header SectionsStep 3. Interact with Forms and Input FieldsNavigate through Windows and FramesHandling WaitsAssertions and ValidationsHandling Alerts and Pop-upsCleanup and TeardownTesting Framework Integration1. Integrate with unittest Framework2. Integrate with pytest FrameworkSelenium Python ResourcesBest Practices using Selenium WebDriver with PythonWhy run Selenium Python Tests on BrowserStack Real Device Cloud?Selenium Python Tutorial (with Example)New features are regularly added to web applications to boost user engagement. To ensure these updates work as intended and that the user interface remains functional, automated testing is crucial. Selenium is a widely-used tool for this type of automation testing.Selenium is an open-source automation testing tool that supports various scripting languages such as C#, Java, Perl, Ruby, JavaScript, and others. The choice of scripting language can be made based on the specific requirements of the application being tested.Python is one of the most popular choices when it comes to scripting with 51% of the developers using it, as suggested by theStackOverflow 2024 annual survey.Why do Developers prefer Python for writing Selenium Test Scripts?Developers prefer Python for writing Selenium test scripts because of its simplicity, readability, and ease of use. Python‚Äôs clear and concise syntax allows for faster script development and easier maintenance, which is crucial in testing scenarios.Additionally, Python has a rich set of libraries and frameworks that complement Selenium, making it easier to handle complex tasks such as data manipulation, reporting, and integration with other tools.Python‚Äôs extensive community support and documentation also provide valuable resources for troubleshooting and improving test scripts. These factors make Python a popular choice for Selenium automation.Getting Started with Selenium PythonGetting started with Selenium using Python involves setting up an environment where you can write and run automated test scripts for web applications.Selenium, combined with Python, offers a powerful and easy-to-learn toolset for automating browser interactions. Python‚Äôs simple syntax makes it ideal for quickly writing clear and maintainable test scripts.To begin, you‚Äôll need to install the Selenium WebDriver, set up a compatible browser, and learn the basics of locating web elements, interacting with them, and running test cases. This combination is perfect for testing dynamic and responsive web applications efficiently.Selenium Python Example: How to run your first Test?To run Selenium Python Tests here are the steps to follow:Step 1.Import the Necessary ClassesFirst, you‚Äôll need to import the WebDriver and Keys classes from Selenium. These classes help you interact with a web browser and emulate keyboard actions.fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysCopiedwebdriver:Allows you to control the browser.Keys:Lets you simulate keyboard key presses.Step 2.Create a WebDriver InstanceTo interact with a browser, you‚Äôll need to create an instance of WebDriver. In this example, we use Chrome:driver=webdriver.Chrome('./chromedriver')CopiedMake sure chromedriver is in the same directory as your Python script. This command opens a new Chrome browser window.Step 3.Load a WebsiteUse the .get() method to navigate to a website. This method waits for the page to load completely:driver.get(\"https://www.python.org\")CopiedThis will open Python‚Äôs official website in the browser.Step 4.Check the Page TitleOnce the page is loaded, you can retrieve and print the page title to verify you‚Äôre on the right page:print(driver.title)CopiedYou should see:WelcometoPython.orgCopiedStep¬†5.Interact with the Search BarTo perform a search, locate the search bar element, enter a query, and submit it. Here‚Äôs how to find the search bar by its name attribute and interact with it:search_bar=driver.find_element_by_name(\"q\")search_bar.clear()search_bar.send_keys(\"getting started with python\")search_bar.send_keys(Keys.RETURN)CopiedAs an explanation :find_element_by_name(‚Äúq‚Äù):Finds the search bar element.clear():Clears any existing text.send_keys(‚Äúgetting started with python‚Äù):Types the query into the search bar.send_keys(Keys.RETURN):Simulates pressing the Return (Enter) key.Step 6.Verify the Resulting URLAfter submitting the search query, you can check the updated URL to confirm the search results page:print(driver.current_url)CopiedYou should see a URL similar to:https://www.python.org/search/?q=getting+started+with+python&submit=Step 7.Close the BrowserFinally, close the browser session to end the test:driver.close()CopiedSummary :Here is the complete script for your first Selenium test in Python. Save this code in a file named selenium_test.py and run it using python selenium_test.py:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeys# Create a new instance of the Chrome driverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org\")# Print the page titleprint(driver.title)# Find the search bar using its name attributesearch_bar=driver.find_element_by_name(\"q\")search_bar.clear()search_bar.send_keys(\"getting started with python\")search_bar.send_keys(Keys.RETURN)# Print the current URLprint(driver.current_url)# Close the browser windowdriver.close()CopiedAlso Read:How to run Selenium tests on Chrome using ChromeDriverInteracting with Common Elements in SeleniumSelenium allows you to perform a variety of actions on web elements. You have already touched upon entering input, here‚Äôs how to interact with buttons, and dropdowns:Assuming you want to click a button with the ID ‚Äúsubmit-button‚Äù after entering the input in the search bar :# Locate the button by its ID attributebutton=driver.find_element_by_id(\"submit-button\")# Click the buttonbutton.click()CopiedIf you need to click a link by its text:# Locate the link by its link textlink=driver.find_element_by_link_text(\"Click Here\")# Click the linklink.click()CopiedExplanation:find_element_by_id(‚Äúsubmit-button‚Äù):Finds the button with the ID ‚Äúsubmit-button‚Äù.find_element_by_link_text(‚ÄúClick Here‚Äù):Finds a link with the text ‚ÄúClick Here‚Äù.click():Simulates a mouse click on the element.Read More:Selenium Testing with Python: Automated Testing of a Signup FormThough dropdowns are not present on this site, they are quite common for web application testingFor dropdown menus, Selenium provides the Select class to handle options within <select> elements.Example:Selecting an Option from a DropdownAssuming you have a dropdown menu with the ID ‚Äúdropdown-menu‚Äù:fromselenium.webdriver.support.uiimportSelect# Locate the dropdown menu by its ID attributedropdown=Select(driver.find_element_by_id(\"dropdown-menu\"))# Select an option by visible textdropdown.select_by_visible_text(\"Option 1\")# Or select an option by valuedropdown.select_by_value(\"option1\")# Or select an option by index (0-based index)dropdown.select_by_index(0)CopiedExplanation:Select(driver.find_element_by_id(‚Äúdropdown-menu‚Äù)):Creates a Select object for the dropdown menu.select_by_visible_text(‚ÄúOption 1‚Äù):Selects an option by its visible text.select_by_value(‚Äúoption1‚Äù):Selects an option by its value attribute.select_by_index(0):Selects an option by its index in the dropdown.Navigate through HTML DOM ElementsThe HTML Document Object Model (DOM) represents the structure of a web page as a tree of objects. Selenium allows you to interact with these elements using various locator strategies.In our first test script, we have already used some of the methods used to navigate DOM elements. This section will be a slightly more detailed view into how you can use different methods to locate and interact with elements on the Python.org website.Read More:Page Object Model and Page Factory in Selenium PythonStep 1. Locate and Interact with Navigation LinksExample: Clicking the ‚ÄúDownloads‚Äù LinkTo click the ‚ÄúDownloads‚Äù link, you can use the.find_element_by_link_text()method, but here‚Äôs how to use other locators to achieve the same, example by usingfind_element_by_xpath:fromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate the \"Downloads\" link using XPathdownloads_link=driver.find_element_by_xpath(\"//a[text()='Downloads']\")# Click the \"Downloads\" linkdownloads_link.click()# Optionally, print the current URL to confirm navigationprint(driver.current_url)# Close the browserdriver.close()CopiedExplanation:XPath://a[text()='Downloads']Copiedlocates the ‚ÄúDownloads‚Äù link based on its visible text.Step 2. Access and Interact with Header SectionsExample: Accessing the Main HeaderTo access the main header text, you can use different locators to find the header element.Using find_element_by_class_name:fromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate the header element using its class nameheader=driver.find_element_by_class_name(\"introduction\")# Print the text of the headerprint(header.text)# Close the browserdriver.close()CopiedExplanation:Class Name:‚Äúintroduction‚Äù is used to find the header element based on its class.Step 3. Interact with Forms and Input FieldsExample: Filling Out and Submitting the Search FormTo interact with the search form, you can use the .find_element_by_name() method to locate the input field.Using find_element_by_name:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeys# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate the search bar using its name attributesearch_bar=driver.find_element_by_name(\"q\")# Clear any existing text and enter a new search termsearch_bar.clear()search_bar.send_keys(\"Python Documentation\")search_bar.send_keys(Keys.RETURN)# Optionally, print the current URL to confirm search resultsprint(driver.current_url)# Close the browserdriver.close()CopiedExplanation:Name Attribute:find_element_by_name(‚Äúq‚Äù)locates the search input field by its name attribute.Navigate through Windows and FramesWhen working with multiple browser windows or tabs, or dealing with iframes (frames), you may need to switch contexts to interact with different elements.Step1. Handling Multiple Browser Windows or TabsExample: Switching Between WindowsTo handle multiple browser windows or tabs:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysimporttime# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Open a new tab with a different URLdriver.execute_script(\"window.open('https://www.google.com', '_blank');\")# Switch to the new tabdriver.switch_to.window(driver.window_handles[1])# Perform actions in the new tab (e.g., search for 'Selenium')search_bar=driver.find_element_by_name(\"q\")search_bar.clear()search_bar.send_keys(\"Selenium\")search_bar.send_keys(Keys.RETURN)# Switch back to the original tabdriver.switch_to.window(driver.window_handles[0])# Close the browserdriver.quit()CopiedExplanation:window_handles:Retrieves a list of window handles. Switch to a specific window using switch_to.window().execute_script(‚Äúwindow.open()‚Äù):Opens a new tab or window.Step2. Switching Between FramesExample: Switching to an iFrameTo switch to and interact with elements within an iframe:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysimporttime# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Example site with iframe (replace with an actual URL that contains iframes)driver.get(\"https://www.w3schools.com/html/html_iframe.asp\")# Switch to the iframe using its name or IDdriver.switch_to.frame(\"iframeResult\")# Perform actions within the iframeprint(driver.find_element_by_tag_name(\"h1\").text)# Switch back to the default contentdriver.switch_to.default_content()# Close the browserdriver.quit()CopiedExplanation:switch_to.frame():Switches to a specific iframe.switch_to.default_content():Switches back to the main page.Handling WaitsDynamic content can load at different times, so using waits helps ensure elements are present before interacting with them.Step 1. Implicit WaitsExample: Using Implicit Waitsfromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Set implicit waitdriver.implicitly_wait(10)# seconds# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate an element with implicit waitsearch_bar=driver.find_element_by_name(\"q\")search_bar.send_keys(\"Python\")# Close the browserdriver.quit()CopiedExplanation:implicitly_wait():Sets a default wait time for finding elements. If an element is not immediately found, WebDriver will wait up to the specified time.Step 2. Explicit Waitsfromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.support.uiimportWebDriverWaitfromselenium.webdriver.supportimportexpected_conditionsasEC# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Define WebDriverWait with a maximum wait time of 10 secondswait=WebDriverWait(driver,10)# Wait for the search bar to be present in the DOMsearch_bar=wait.until(EC.presence_of_element_located((By.NAME,\"q\")))# Perform actions on the search barsearch_bar.send_keys(\"Python\")# Close the browserdriver.quit()CopiedExplanation:WebDriverWait(driver, 10):Creates an instance of WebDriverWait, specifying a maximum wait time of 10 seconds.wait.until(EC.presence_of_element_located((By.NAME, ‚Äúq‚Äù))):Pauses the script until the search bar element is found by its name attribute. If the element is not found within 10 seconds, a TimeoutException will be raised.Must Read:How to use Wait commands in Selenium WebDriverAssertions and ValidationsTo ensure that the application behaves as expected, you can use assertions and validations.Verifying Expected Conditions Using AssertionsExample: Verifying Page Title and Search Resultsfromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysfromselenium.webdriver.support.uiimportWebDriverWaitfromselenium.webdriver.supportimportexpected_conditionsasEC# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Use WebDriverWait to wait for the search bar to be presentwait=WebDriverWait(driver,10)search_bar=wait.until(EC.presence_of_element_located((By.NAME,\"q\")))# Perform searchsearch_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)# Verify the title contains \"Python\"assert\"Python\"indriver.title# Verify search results contain expected textresults=wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,\"ul.list-recent-events\")))assert\"Python\"inresults.text# Print the results to verifyprint(driver.title)print(results.text)# Close the browserdriver.quit()CopiedExplanation:Assertions:Used to check if the conditions are met. For example, checking if the title or text of elements matches expected values.assert:Verifies conditions and will raise an AssertionError if the condition is not true.Handling Alerts and Pop-upsWeb applications often use JavaScript alerts, confirmation dialogs, or prompts to interact with users. Selenium provides ways to handle these pop-ups effectively.Dealing with JavaScript AlertsJavaScript alerts are simple pop-up messages that require user interaction to dismiss. Selenium allows you to interact with these alerts using the switch_to.alert() method.fromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.common.keysimportKeys# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open a website that triggers an alert (example URL)driver.get(\"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/Alert.html\")# Click a button that triggers an alerttrigger_alert_button=driver.find_element(By.ID,\"alertButton\")# Adjust locator as neededtrigger_alert_button.click()# Switch to the alert and accept italert=driver.switch_to.alertprint(\"Alert text:\",alert.text)alert.accept()# Close the browserdriver.quit()CopiedExplanation:switch_to.alert:Switches the context to the alert. Once switched, you can interact with the alert.alert.accept():Accepts the alert, which is equivalent to clicking ‚ÄúOK‚Äù on the alert.Other Alert Actions:alert.dismiss():Clicks ‚ÄúCancel‚Äù on a confirmation dialog.alert.send_keys(‚Äútext‚Äù):Sends text to a prompt dialog (if applicable).Cleanup and TeardownProperly closing the browser session is crucial for releasing resources and ensuring that your automation script runs cleanly.Properly Closing the Browser SessionExample: Closing the Browserfromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open a websitedriver.get(\"https://www.python.org/\")# Perform actions (e.g., search)search_bar=driver.find_element(By.NAME,\"q\")search_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)# Cleanup: Close the browserdriver.quit()CopiedExplanation:driver.quit():Closes all browser windows and ends the WebDriver session. This is the preferred method for cleanup as it ensures the browser process is terminated and resources are freed.Alternative Methods:driver.close():Closes the current window. If it‚Äôs the only window open, it will end the session. Use driver.quit() for complete cleanup.Read More:How to Create and Use Action Class in Selenium PythonTesting Framework IntegrationIntegrating Selenium tests with a testing framework provides structured test cases, reporting, and additional functionality such as setup and teardown methods.1. Integrate with unittest Frameworkunittest is a built-in Python testing framework that provides a structured approach to writing and running tests, including test case management, fixtures, and test discovery. Integrating Selenium with unittest allows for organized test cases, setup and teardown methods, and detailed test reports, making it easier to manage and maintain automated tests.Example: Basic Test with unittestimportunittestfromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.common.keysimportKeysclassPythonOrgSearchTest(unittest.TestCase):@classmethoddefsetUpClass(cls):cls.driver=webdriver.Chrome('./chromedriver')cls.driver.get(\"https://www.python.org/\")deftest_search_python(self):search_bar=self.driver.find_element(By.NAME,\"q\")search_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)self.assertIn(\"Python\",self.driver.title)@classmethoddeftearDownClass(cls):cls.driver.quit()if__name__==\"__main__\":unittest.main()CopiedExplanation:unittest.TestCase:Defines a test case class. Each method within the class represents a test case.setUpClass():Initializes resources needed for the tests. Runs once before any test methods are executed.tearDownClass():Cleans up resources. Runs once after all test methods have completed.unittest.main():Runs the tests and provides output in the console.Read More:Top 8 Python Testing Frameworks in 20242. Integrate with pytest Frameworkpytest is a powerful and flexible Python testing framework that simplifies writing tests with its rich feature set, including fixtures, parameterized tests, and detailed assertions. Integrating Selenium with pytest enhances test organization, facilitates advanced setup/teardown functionality, and generates comprehensive test reports, improving test reliability and clarity.Example: Basic Test with pytestimport pytestfromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.common.keysimportKeys@pytest.fixture(scope=\"module\")defdriver():driver=webdriver.Chrome('./chromedriver')yielddriver\n\n¬†¬†¬†¬†driver.quit()deftest_search_python(driver):driver.get(\"https://www.python.org/\")search_bar=driver.find_element(By.NAME,\"q\")search_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)assert\"Python\"indriver.titleCopiedExplanation:pytest.fixture():Defines a fixture that sets up and tears down resources. The scope=‚Äùmodule‚Äù ensures the fixture is run once per module.yield:Provides the driver instance to the test function and performs cleanup after the test completes.assert:Checks that the condition is met. pytest will report the assertion failure if theRun Selenium Python Tests on Real DevicesSelenium Python ResourcesSelenium Python Tutorial (with Example)Page Object Model and Page Factory in Selenium PythonUnderstanding ExpectedConditions in SeleniumUnderstanding Role of Thread.sleep() in SeleniumHeadless Browser Testing With Selenium PythonHow to install GeckoDriver for Selenium Python?How to perform Web Scraping using Selenium and PythonHow to Create and Use Action Class in Selenium PythonHow to download a file using Selenium and PythonHow to Press Enter without Element in Selenium Python?UI Automation using Python and Selenium: TutorialGet Current URL in Selenium using Python: TutorialBest Practices using Selenium WebDriver with PythonHere are five best practices for using Selenium WebDriver with Python:Use Explicit Waits:Prefer explicit waits over implicit waits to handle dynamic content. Explicit waits ensure that your script interacts with elements only when they are ready, reducing the chances of encountering timing issues.Organize Tests with Frameworks:Integrate Selenium tests with testing frameworks like unittest or pytest to structure your test cases, manage setup and teardown, and generate detailed test reports.Use Page Object Model (POM):Implement the Page Object Model to separate test logic from page-specific code. This design pattern promotes code reusability, maintainability, and easier updates.Handle Exceptions Carefully:Implement error handling and logging to manage unexpected situations, such as element not found or timeout errors. This helps in debugging and provides insights into test failures.Optimize Browser Performance:Run tests in headless mode or use browser profiles to speed up test execution and reduce resource consumption. Also, ensure that browser drivers are up-to-date for compatibility and performance improvements.Why run Selenium Python Tests on BrowserStack Real Device Cloud?Running Selenium Python tests on BrowserStack‚Äôs Real Device Cloud offers numerous advantages that significantly enhance testing efficiency and effectiveness.BrowserStack provides access to a wide range of real devices and browsers, ensuring that tests reflect real-world scenarios and uncover device-specific issues. The platform supports scalable parallel execution, allowing multiple tests to run simultaneously across various configurations, which accelerates the development cycle.Cross-platform testing on BrowserStack ensures consistent application performance across different environments. Additionally, it offers real-time debugging features such as live logs, screenshots, and video recordings, which aid in quick troubleshooting.Seamless integration with CI/CD pipelines further automates the testing process, enabling tests to run on every code change and providing immediate feedback on application quality. Overall, BrowserStack Automate enables comprehensive, efficient, and reliable testing, fostering continuous development and deployment.Talk to an ExpertTagsPythonSeleniumOn This PageOn This PageWhy do Developers prefer Python for writing Selenium Test Scripts?Getting Started with Selenium PythonSelenium Python Example: How to run your first Test?Interacting with Common Elements in SeleniumNavigate through HTML DOM ElementsStep 1. Locate and Interact with Navigation LinksStep 2. Access and Interact with Header SectionsStep 3. Interact with Forms and Input FieldsNavigate through Windows and FramesHandling WaitsAssertions and ValidationsHandling Alerts and Pop-upsCleanup and TeardownTesting Framework Integration1. Integrate with unittest Framework2. Integrate with pytest FrameworkSelenium Python ResourcesBest Practices using Selenium WebDriver with PythonWhy run Selenium Python Tests on BrowserStack Real Device Cloud?63,000+ViewsRelated GuidesHow to Create and Use Action Class in Selenium PythonActions class is an ability provided by Selenium for handling keyboard and mouse events. Learn how t...Learn MoreDecember 19, 20227 min readHow to Double Click on an Element in Selenium Python?Learn more about double click in Selenium Python, which assists QA who need to automate this double-...Learn MoreMarch 1, 20238 min readHow to Press Enter without Element in Selenium Python?Learn how to press enter in Selenium with the help of send_keys() function in Selenium Python in thi...Learn MoreJune 3, 20247 min readView all guidesElevate Your Testing ExpertiseJoin expert-led webinars on software testing and stay updated with the latest trends and techniques.Register Now!Test Automation on Real Devices & BrowsersTry BrowserStack Automate for Automation Testing for websites on 3500+ real Devices & Browser. Seamlessly Integrate with Frameworks to run parallel tests and get reports on custom dashboardsContact SalesHow to Create and Use Action Class in Selenium PythonActions class is an ability provided by Selenium for handling keyboard and mouse events. Learn how t...Learn MoreDecember 19, 20227 min readHow to Double Click on an Element in Selenium Python?Learn more about double click in Selenium Python, which assists QA who need to automate this double-...Learn MoreMarch 1, 20238 min readHow to Press Enter without Element in Selenium Python?Learn how to press enter in Selenium with the help of send_keys() function in Selenium Python in thi...Learn MoreJune 3, 20247 min read\n",
      "error": null,
      "changes": {},
      "additional_data": {
        "action_params": "{'include_links': False}",
        "duration_ms": 181.117,
        "page_changed": false,
        "previous_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "previous_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "new_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "new_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "element_details": {},
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:01:28.568062",
      "phase": "pre_action",
      "action_type": "done",
      "selector": null,
      "xpath": null,
      "element_index": null,
      "text": "The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.",
      "url": null,
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "element_info": {}
    },
    {
      "timestamp": "2025-03-12T15:01:28.575542",
      "phase": "post_action",
      "action_type": "done",
      "selector": null,
      "xpath": null,
      "element_index": null,
      "text": "The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.",
      "url": null,
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "attributes": {},
      "result": "The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.",
      "error": null,
      "changes": {},
      "additional_data": {
        "action_params": "{'text': 'The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.'}",
        "duration_ms": 3.0469999999999997,
        "page_changed": false,
        "previous_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "previous_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "new_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "new_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "element_details": {},
        "post_action_element_details": {}
      }
    }
  ],
  "formatted_actions": [
    {
      "timestamp": "2025-03-12T15:00:48.467577",
      "action_type": "go_to_url",
      "phase": "pre_action",
      "element_info": {},
      "url": "https://www.google.com",
      "current_url": "about:blank"
    },
    {
      "timestamp": "2025-03-12T15:00:51.042915",
      "action_type": "go_to_url",
      "phase": "post_action",
      "element_info": {},
      "url": "https://www.google.com",
      "current_url": "https://www.google.com/",
      "result": "üîó  Navigated to https://www.google.com",
      "additional_data": {
        "action_params": "{'url': 'https://www.google.com'}",
        "duration_ms": 2572.125,
        "page_changed": true,
        "previous_url": "about:blank",
        "previous_title": "",
        "new_url": "https://www.google.com/",
        "new_title": "Google",
        "element_details": {},
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:00:55.790033",
      "action_type": "input_text",
      "phase": "pre_action",
      "element_info": {
        "index": 8,
        "selector": "#APjFqb",
        "xpath": "//*[@id=\"APjFqb\"]",
        "tag_name": "textarea",
        "is_visible": true,
        "is_interactive": true,
        "css_selector": "#APjFqb",
        "attributes": {
          "id": "APjFqb",
          "class": "gLFyf",
          "name": "q",
          "value": "",
          "placeholder": "",
          "aria-label": "Í≤ÄÏÉâ",
          "role": "combobox",
          "title": "Í≤ÄÏÉâ"
        },
        "text_content": "",
        "inner_text": "",
        "has_parent": true
      },
      "text": "Python browser automation",
      "current_url": "https://www.google.com/"
    },
    {
      "timestamp": "2025-03-12T15:00:56.042888",
      "action_type": "input_text",
      "phase": "post_action",
      "element_info": {
        "index": 8,
        "selector": "#APjFqb",
        "xpath": "//*[@id=\"APjFqb\"]"
      },
      "text": "Python browser automation",
      "current_url": "https://www.google.com/",
      "result": "‚å®Ô∏è  Input \"Python browser automation\" into index 8",
      "changes": {
        "timestamp": {
          "before": "2025-03-12T15:00:55.790052",
          "after": "2025-03-12T15:00:56.042904"
        }
      },
      "additional_data": {
        "action_params": "{'index': 8, 'text': 'Python browser automation'}",
        "duration_ms": 168.603,
        "page_changed": false,
        "previous_url": "https://www.google.com/",
        "previous_title": "Google",
        "new_url": "https://www.google.com/",
        "new_title": "Google",
        "element_details": {
          "index": 8,
          "tag_name": "textarea",
          "text_content": "",
          "inner_text": "",
          "is_visible": true,
          "is_enabled": true,
          "attributes": {
            "id": "APjFqb",
            "class": "gLFyf",
            "name": "q",
            "aria-label": "Í≤ÄÏÉâ",
            "role": "combobox",
            "title": "Í≤ÄÏÉâ"
          },
          "position": {
            "x": 396,
            "y": 377
          },
          "size": {
            "width": 403,
            "height": 46
          },
          "xpath": "//*[@id=\"APjFqb\"]",
          "css_selector": "#APjFqb",
          "parent_info": {
            "tag_name": "div",
            "id": null,
            "class_name": "a4bIc",
            "has_parent": true
          },
          "children_info": {
            "count": 0,
            "tags": []
          }
        },
        "post_action_element_details": {
          "is_visible": true,
          "is_enabled": true,
          "text_content": "",
          "attributes": {
            "class": "gLFyf"
          }
        }
      }
    },
    {
      "timestamp": "2025-03-12T15:01:01.819088",
      "action_type": "click_element",
      "phase": "pre_action",
      "element_info": {
        "index": 24,
        "selector": "input.gNO89b",
        "xpath": "/html/body/div[1]/div[3]/form[1]/div[1]/div[1]/div[2]/div[4]/div[6]/center[1]/input[1]",
        "tag_name": "input",
        "is_visible": true,
        "is_interactive": true,
        "css_selector": "input.gNO89b",
        "attributes": {
          "class": "gNO89b",
          "name": "btnK",
          "type": "submit",
          "value": "Google Í≤ÄÏÉâ",
          "aria-label": "Google Í≤ÄÏÉâ",
          "role": "button"
        },
        "text_content": "",
        "inner_text": "",
        "has_parent": true
      },
      "current_url": "https://www.google.com/"
    },
    {
      "timestamp": "2025-03-12T15:01:03.365840",
      "action_type": "click_element",
      "phase": "post_action",
      "element_info": {
        "index": 24,
        "selector": "input.gNO89b",
        "xpath": "/html/body/div[1]/div[3]/form[1]/div[1]/div[1]/div[2]/div[4]/div[6]/center[1]/input[1]"
      },
      "current_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
      "result": "üñ±Ô∏è  Clicked button with index 24: ",
      "changes": {
        "timestamp": {
          "before": "2025-03-12T15:01:01.819112",
          "after": "2025-03-12T15:01:03.365860"
        }
      },
      "additional_data": {
        "action_params": "{'index': 24}",
        "duration_ms": 1539.133,
        "page_changed": true,
        "previous_url": "https://www.google.com/",
        "previous_title": "Google",
        "new_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
        "new_title": "Python browser automation - Google Í≤ÄÏÉâ",
        "element_details": {
          "index": 24,
          "tag_name": "input",
          "text_content": "",
          "inner_text": "",
          "is_visible": true,
          "is_enabled": true,
          "attributes": {
            "class": "gNO89b",
            "name": "btnK",
            "type": "submit",
            "value": "Google Í≤ÄÏÉâ",
            "aria-label": "Google Í≤ÄÏÉâ",
            "role": "button"
          },
          "position": {
            "x": 508.953125,
            "y": 752
          },
          "size": {
            "width": 107.2578125,
            "height": 36
          },
          "xpath": "/html/body/div[1]/div[3]/form[1]/div[1]/div[1]/div[2]/div[4]/div[6]/center[1]/input[1]",
          "css_selector": "input.gNO89b",
          "parent_info": {
            "tag_name": "center",
            "id": null,
            "class_name": null,
            "has_parent": true
          },
          "children_info": {
            "count": 0,
            "tags": []
          }
        },
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:01:12.915171",
      "action_type": "click_element",
      "phase": "pre_action",
      "element_info": {
        "index": 25,
        "selector": "a.zReHs",
        "xpath": "//*[@id=\"rso\"]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]",
        "tag_name": "a",
        "is_visible": true,
        "is_interactive": true,
        "css_selector": "a.zReHs",
        "attributes": {
          "class": "zReHs",
          "href": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test"
        },
        "text_content": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com‚Ä∫ Guide",
        "inner_text": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com‚Ä∫ Guide",
        "has_parent": true,
        "children_count": 2,
        "children_tags": [
          "h3",
          "div"
        ]
      },
      "current_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE"
    },
    {
      "timestamp": "2025-03-12T15:01:14.165923",
      "action_type": "click_element",
      "phase": "post_action",
      "element_info": {
        "index": 25,
        "selector": "a.zReHs",
        "xpath": "//*[@id=\"rso\"]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]"
      },
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "result": "üñ±Ô∏è  Clicked button with index 25: Selenium Python Tutorial (with Example)",
      "changes": {
        "timestamp": {
          "before": "2025-03-12T15:01:12.915197",
          "after": "2025-03-12T15:01:14.165945"
        }
      },
      "additional_data": {
        "action_params": "{'index': 25}",
        "duration_ms": 1116.731,
        "page_changed": true,
        "previous_url": "https://www.google.com/search?q=Python+browser+automation&sca_esv=0d8671cb2a035860&source=hp&ei=ECPRZ-HIMv-V0PEP1bC0IQ&iflsig=ACkRmUkAAAAAZ9ExIH_-kfSDXRndtz7J7hSbY-UF7N8u&ved=0ahUKEwjhkL7q7oOMAxX_CjQIHVUYLQQQ4dUDCA4&oq=Python+browser+automation&gs_lp=Egdnd3Mtd2l6IhlQeXRob24gYnJvd3NlciBhdXRvbWF0aW9uMgcQABiABBgTMgcQABiABBgTMgcQABiABBgTMgYQABgTGB4yBhAAGBMYHjIGEAAYExgeMgYQABgTGB4yBhAAGBMYHjIIEAAYExgIGB4yCBAAGBMYBRgeSM8vUABYT3AAeACQAQGYAbMBoAHsBKoBAzAuNLgBDMgBAPgBAZgCA6AC1QPCAgkQABiABBgTGA2YAwCSBwMwLjOgB5sb&sclient=gws-wiz&sei=HiPRZ--KCajB0-kP4ZnywQE",
        "previous_title": "Python browser automation - Google Í≤ÄÏÉâ",
        "new_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "new_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "element_details": {
          "index": 25,
          "tag_name": "a",
          "text_content": "Selenium Python Tutorial (with Example)BrowserStackhttps://www.browserstack.com ‚Ä∫ Guide",
          "inner_text": "Selenium Python Tutorial (with Example)\nBrowserStack\nhttps://www.browserstack.com ‚Ä∫ Guide",
          "is_visible": true,
          "is_enabled": true,
          "attributes": {
            "class": "zReHs",
            "href": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test"
          },
          "position": {
            "x": 90.5,
            "y": 218
          },
          "size": {
            "width": 652,
            "height": 72
          },
          "xpath": "//*[@id=\"rso\"]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]",
          "css_selector": "a.zReHs",
          "parent_info": {
            "tag_name": "span",
            "id": null,
            "class_name": null,
            "has_parent": true
          },
          "children_info": {
            "count": 2,
            "tags": [
              "h3",
              "div"
            ]
          }
        },
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:01:21.646790",
      "action_type": "extract_content",
      "phase": "pre_action",
      "element_info": {},
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test"
    },
    {
      "timestamp": "2025-03-12T15:01:21.831628",
      "action_type": "extract_content",
      "phase": "post_action",
      "element_info": {},
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "result": "üìÑ  Extracted page as text\n: HomeGuideSelenium Python Tutorial (with Example)On This PageOn This PageWhy do Developers prefer Python for writing Selenium Test Scripts?Getting Started with Selenium PythonSelenium Python Example: How to run your first Test?Interacting with Common Elements in SeleniumNavigate through HTML DOM ElementsStep 1. Locate and Interact with Navigation LinksStep 2. Access and Interact with Header SectionsStep 3. Interact with Forms and Input FieldsNavigate through Windows and FramesHandling WaitsAssertions and ValidationsHandling Alerts and Pop-upsCleanup and TeardownTesting Framework Integration1. Integrate with unittest Framework2. Integrate with pytest FrameworkSelenium Python ResourcesBest Practices using Selenium WebDriver with PythonWhy run Selenium Python Tests on BrowserStack Real Device Cloud?Selenium Python Tutorial (with Example)New features are regularly added to web applications to boost user engagement. To ensure these updates work as intended and that the user interface remains functional, automated testing is crucial. Selenium is a widely-used tool for this type of automation testing.Selenium is an open-source automation testing tool that supports various scripting languages such as C#, Java, Perl, Ruby, JavaScript, and others. The choice of scripting language can be made based on the specific requirements of the application being tested.Python is one of the most popular choices when it comes to scripting with 51% of the developers using it, as suggested by theStackOverflow 2024 annual survey.Why do Developers prefer Python for writing Selenium Test Scripts?Developers prefer Python for writing Selenium test scripts because of its simplicity, readability, and ease of use. Python‚Äôs clear and concise syntax allows for faster script development and easier maintenance, which is crucial in testing scenarios.Additionally, Python has a rich set of libraries and frameworks that complement Selenium, making it easier to handle complex tasks such as data manipulation, reporting, and integration with other tools.Python‚Äôs extensive community support and documentation also provide valuable resources for troubleshooting and improving test scripts. These factors make Python a popular choice for Selenium automation.Getting Started with Selenium PythonGetting started with Selenium using Python involves setting up an environment where you can write and run automated test scripts for web applications.Selenium, combined with Python, offers a powerful and easy-to-learn toolset for automating browser interactions. Python‚Äôs simple syntax makes it ideal for quickly writing clear and maintainable test scripts.To begin, you‚Äôll need to install the Selenium WebDriver, set up a compatible browser, and learn the basics of locating web elements, interacting with them, and running test cases. This combination is perfect for testing dynamic and responsive web applications efficiently.Selenium Python Example: How to run your first Test?To run Selenium Python Tests here are the steps to follow:Step 1.Import the Necessary ClassesFirst, you‚Äôll need to import the WebDriver and Keys classes from Selenium. These classes help you interact with a web browser and emulate keyboard actions.fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysCopiedwebdriver:Allows you to control the browser.Keys:Lets you simulate keyboard key presses.Step 2.Create a WebDriver InstanceTo interact with a browser, you‚Äôll need to create an instance of WebDriver. In this example, we use Chrome:driver=webdriver.Chrome('./chromedriver')CopiedMake sure chromedriver is in the same directory as your Python script. This command opens a new Chrome browser window.Step 3.Load a WebsiteUse the .get() method to navigate to a website. This method waits for the page to load completely:driver.get(\"https://www.python.org\")CopiedThis will open Python‚Äôs official website in the browser.Step 4.Check the Page TitleOnce the page is loaded, you can retrieve and print the page title to verify you‚Äôre on the right page:print(driver.title)CopiedYou should see:WelcometoPython.orgCopiedStep¬†5.Interact with the Search BarTo perform a search, locate the search bar element, enter a query, and submit it. Here‚Äôs how to find the search bar by its name attribute and interact with it:search_bar=driver.find_element_by_name(\"q\")search_bar.clear()search_bar.send_keys(\"getting started with python\")search_bar.send_keys(Keys.RETURN)CopiedAs an explanation :find_element_by_name(‚Äúq‚Äù):Finds the search bar element.clear():Clears any existing text.send_keys(‚Äúgetting started with python‚Äù):Types the query into the search bar.send_keys(Keys.RETURN):Simulates pressing the Return (Enter) key.Step 6.Verify the Resulting URLAfter submitting the search query, you can check the updated URL to confirm the search results page:print(driver.current_url)CopiedYou should see a URL similar to:https://www.python.org/search/?q=getting+started+with+python&submit=Step 7.Close the BrowserFinally, close the browser session to end the test:driver.close()CopiedSummary :Here is the complete script for your first Selenium test in Python. Save this code in a file named selenium_test.py and run it using python selenium_test.py:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeys# Create a new instance of the Chrome driverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org\")# Print the page titleprint(driver.title)# Find the search bar using its name attributesearch_bar=driver.find_element_by_name(\"q\")search_bar.clear()search_bar.send_keys(\"getting started with python\")search_bar.send_keys(Keys.RETURN)# Print the current URLprint(driver.current_url)# Close the browser windowdriver.close()CopiedAlso Read:How to run Selenium tests on Chrome using ChromeDriverInteracting with Common Elements in SeleniumSelenium allows you to perform a variety of actions on web elements. You have already touched upon entering input, here‚Äôs how to interact with buttons, and dropdowns:Assuming you want to click a button with the ID ‚Äúsubmit-button‚Äù after entering the input in the search bar :# Locate the button by its ID attributebutton=driver.find_element_by_id(\"submit-button\")# Click the buttonbutton.click()CopiedIf you need to click a link by its text:# Locate the link by its link textlink=driver.find_element_by_link_text(\"Click Here\")# Click the linklink.click()CopiedExplanation:find_element_by_id(‚Äúsubmit-button‚Äù):Finds the button with the ID ‚Äúsubmit-button‚Äù.find_element_by_link_text(‚ÄúClick Here‚Äù):Finds a link with the text ‚ÄúClick Here‚Äù.click():Simulates a mouse click on the element.Read More:Selenium Testing with Python: Automated Testing of a Signup FormThough dropdowns are not present on this site, they are quite common for web application testingFor dropdown menus, Selenium provides the Select class to handle options within <select> elements.Example:Selecting an Option from a DropdownAssuming you have a dropdown menu with the ID ‚Äúdropdown-menu‚Äù:fromselenium.webdriver.support.uiimportSelect# Locate the dropdown menu by its ID attributedropdown=Select(driver.find_element_by_id(\"dropdown-menu\"))# Select an option by visible textdropdown.select_by_visible_text(\"Option 1\")# Or select an option by valuedropdown.select_by_value(\"option1\")# Or select an option by index (0-based index)dropdown.select_by_index(0)CopiedExplanation:Select(driver.find_element_by_id(‚Äúdropdown-menu‚Äù)):Creates a Select object for the dropdown menu.select_by_visible_text(‚ÄúOption 1‚Äù):Selects an option by its visible text.select_by_value(‚Äúoption1‚Äù):Selects an option by its value attribute.select_by_index(0):Selects an option by its index in the dropdown.Navigate through HTML DOM ElementsThe HTML Document Object Model (DOM) represents the structure of a web page as a tree of objects. Selenium allows you to interact with these elements using various locator strategies.In our first test script, we have already used some of the methods used to navigate DOM elements. This section will be a slightly more detailed view into how you can use different methods to locate and interact with elements on the Python.org website.Read More:Page Object Model and Page Factory in Selenium PythonStep 1. Locate and Interact with Navigation LinksExample: Clicking the ‚ÄúDownloads‚Äù LinkTo click the ‚ÄúDownloads‚Äù link, you can use the.find_element_by_link_text()method, but here‚Äôs how to use other locators to achieve the same, example by usingfind_element_by_xpath:fromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate the \"Downloads\" link using XPathdownloads_link=driver.find_element_by_xpath(\"//a[text()='Downloads']\")# Click the \"Downloads\" linkdownloads_link.click()# Optionally, print the current URL to confirm navigationprint(driver.current_url)# Close the browserdriver.close()CopiedExplanation:XPath://a[text()='Downloads']Copiedlocates the ‚ÄúDownloads‚Äù link based on its visible text.Step 2. Access and Interact with Header SectionsExample: Accessing the Main HeaderTo access the main header text, you can use different locators to find the header element.Using find_element_by_class_name:fromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate the header element using its class nameheader=driver.find_element_by_class_name(\"introduction\")# Print the text of the headerprint(header.text)# Close the browserdriver.close()CopiedExplanation:Class Name:‚Äúintroduction‚Äù is used to find the header element based on its class.Step 3. Interact with Forms and Input FieldsExample: Filling Out and Submitting the Search FormTo interact with the search form, you can use the .find_element_by_name() method to locate the input field.Using find_element_by_name:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeys# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate the search bar using its name attributesearch_bar=driver.find_element_by_name(\"q\")# Clear any existing text and enter a new search termsearch_bar.clear()search_bar.send_keys(\"Python Documentation\")search_bar.send_keys(Keys.RETURN)# Optionally, print the current URL to confirm search resultsprint(driver.current_url)# Close the browserdriver.close()CopiedExplanation:Name Attribute:find_element_by_name(‚Äúq‚Äù)locates the search input field by its name attribute.Navigate through Windows and FramesWhen working with multiple browser windows or tabs, or dealing with iframes (frames), you may need to switch contexts to interact with different elements.Step1. Handling Multiple Browser Windows or TabsExample: Switching Between WindowsTo handle multiple browser windows or tabs:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysimporttime# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Open a new tab with a different URLdriver.execute_script(\"window.open('https://www.google.com', '_blank');\")# Switch to the new tabdriver.switch_to.window(driver.window_handles[1])# Perform actions in the new tab (e.g., search for 'Selenium')search_bar=driver.find_element_by_name(\"q\")search_bar.clear()search_bar.send_keys(\"Selenium\")search_bar.send_keys(Keys.RETURN)# Switch back to the original tabdriver.switch_to.window(driver.window_handles[0])# Close the browserdriver.quit()CopiedExplanation:window_handles:Retrieves a list of window handles. Switch to a specific window using switch_to.window().execute_script(‚Äúwindow.open()‚Äù):Opens a new tab or window.Step2. Switching Between FramesExample: Switching to an iFrameTo switch to and interact with elements within an iframe:fromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysimporttime# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Example site with iframe (replace with an actual URL that contains iframes)driver.get(\"https://www.w3schools.com/html/html_iframe.asp\")# Switch to the iframe using its name or IDdriver.switch_to.frame(\"iframeResult\")# Perform actions within the iframeprint(driver.find_element_by_tag_name(\"h1\").text)# Switch back to the default contentdriver.switch_to.default_content()# Close the browserdriver.quit()CopiedExplanation:switch_to.frame():Switches to a specific iframe.switch_to.default_content():Switches back to the main page.Handling WaitsDynamic content can load at different times, so using waits helps ensure elements are present before interacting with them.Step 1. Implicit WaitsExample: Using Implicit Waitsfromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Set implicit waitdriver.implicitly_wait(10)# seconds# Open the Python websitedriver.get(\"https://www.python.org/\")# Locate an element with implicit waitsearch_bar=driver.find_element_by_name(\"q\")search_bar.send_keys(\"Python\")# Close the browserdriver.quit()CopiedExplanation:implicitly_wait():Sets a default wait time for finding elements. If an element is not immediately found, WebDriver will wait up to the specified time.Step 2. Explicit Waitsfromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.support.uiimportWebDriverWaitfromselenium.webdriver.supportimportexpected_conditionsasEC# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Define WebDriverWait with a maximum wait time of 10 secondswait=WebDriverWait(driver,10)# Wait for the search bar to be present in the DOMsearch_bar=wait.until(EC.presence_of_element_located((By.NAME,\"q\")))# Perform actions on the search barsearch_bar.send_keys(\"Python\")# Close the browserdriver.quit()CopiedExplanation:WebDriverWait(driver, 10):Creates an instance of WebDriverWait, specifying a maximum wait time of 10 seconds.wait.until(EC.presence_of_element_located((By.NAME, ‚Äúq‚Äù))):Pauses the script until the search bar element is found by its name attribute. If the element is not found within 10 seconds, a TimeoutException will be raised.Must Read:How to use Wait commands in Selenium WebDriverAssertions and ValidationsTo ensure that the application behaves as expected, you can use assertions and validations.Verifying Expected Conditions Using AssertionsExample: Verifying Page Title and Search Resultsfromseleniumimportwebdriverfromselenium.webdriver.common.keysimportKeysfromselenium.webdriver.support.uiimportWebDriverWaitfromselenium.webdriver.supportimportexpected_conditionsasEC# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open the Python websitedriver.get(\"https://www.python.org/\")# Use WebDriverWait to wait for the search bar to be presentwait=WebDriverWait(driver,10)search_bar=wait.until(EC.presence_of_element_located((By.NAME,\"q\")))# Perform searchsearch_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)# Verify the title contains \"Python\"assert\"Python\"indriver.title# Verify search results contain expected textresults=wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,\"ul.list-recent-events\")))assert\"Python\"inresults.text# Print the results to verifyprint(driver.title)print(results.text)# Close the browserdriver.quit()CopiedExplanation:Assertions:Used to check if the conditions are met. For example, checking if the title or text of elements matches expected values.assert:Verifies conditions and will raise an AssertionError if the condition is not true.Handling Alerts and Pop-upsWeb applications often use JavaScript alerts, confirmation dialogs, or prompts to interact with users. Selenium provides ways to handle these pop-ups effectively.Dealing with JavaScript AlertsJavaScript alerts are simple pop-up messages that require user interaction to dismiss. Selenium allows you to interact with these alerts using the switch_to.alert() method.fromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.common.keysimportKeys# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open a website that triggers an alert (example URL)driver.get(\"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/Alert.html\")# Click a button that triggers an alerttrigger_alert_button=driver.find_element(By.ID,\"alertButton\")# Adjust locator as neededtrigger_alert_button.click()# Switch to the alert and accept italert=driver.switch_to.alertprint(\"Alert text:\",alert.text)alert.accept()# Close the browserdriver.quit()CopiedExplanation:switch_to.alert:Switches the context to the alert. Once switched, you can interact with the alert.alert.accept():Accepts the alert, which is equivalent to clicking ‚ÄúOK‚Äù on the alert.Other Alert Actions:alert.dismiss():Clicks ‚ÄúCancel‚Äù on a confirmation dialog.alert.send_keys(‚Äútext‚Äù):Sends text to a prompt dialog (if applicable).Cleanup and TeardownProperly closing the browser session is crucial for releasing resources and ensuring that your automation script runs cleanly.Properly Closing the Browser SessionExample: Closing the Browserfromseleniumimportwebdriver# Set up the WebDriverdriver=webdriver.Chrome('./chromedriver')# Open a websitedriver.get(\"https://www.python.org/\")# Perform actions (e.g., search)search_bar=driver.find_element(By.NAME,\"q\")search_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)# Cleanup: Close the browserdriver.quit()CopiedExplanation:driver.quit():Closes all browser windows and ends the WebDriver session. This is the preferred method for cleanup as it ensures the browser process is terminated and resources are freed.Alternative Methods:driver.close():Closes the current window. If it‚Äôs the only window open, it will end the session. Use driver.quit() for complete cleanup.Read More:How to Create and Use Action Class in Selenium PythonTesting Framework IntegrationIntegrating Selenium tests with a testing framework provides structured test cases, reporting, and additional functionality such as setup and teardown methods.1. Integrate with unittest Frameworkunittest is a built-in Python testing framework that provides a structured approach to writing and running tests, including test case management, fixtures, and test discovery. Integrating Selenium with unittest allows for organized test cases, setup and teardown methods, and detailed test reports, making it easier to manage and maintain automated tests.Example: Basic Test with unittestimportunittestfromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.common.keysimportKeysclassPythonOrgSearchTest(unittest.TestCase):@classmethoddefsetUpClass(cls):cls.driver=webdriver.Chrome('./chromedriver')cls.driver.get(\"https://www.python.org/\")deftest_search_python(self):search_bar=self.driver.find_element(By.NAME,\"q\")search_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)self.assertIn(\"Python\",self.driver.title)@classmethoddeftearDownClass(cls):cls.driver.quit()if__name__==\"__main__\":unittest.main()CopiedExplanation:unittest.TestCase:Defines a test case class. Each method within the class represents a test case.setUpClass():Initializes resources needed for the tests. Runs once before any test methods are executed.tearDownClass():Cleans up resources. Runs once after all test methods have completed.unittest.main():Runs the tests and provides output in the console.Read More:Top 8 Python Testing Frameworks in 20242. Integrate with pytest Frameworkpytest is a powerful and flexible Python testing framework that simplifies writing tests with its rich feature set, including fixtures, parameterized tests, and detailed assertions. Integrating Selenium with pytest enhances test organization, facilitates advanced setup/teardown functionality, and generates comprehensive test reports, improving test reliability and clarity.Example: Basic Test with pytestimport pytestfromseleniumimportwebdriverfromselenium.webdriver.common.byimportByfromselenium.webdriver.common.keysimportKeys@pytest.fixture(scope=\"module\")defdriver():driver=webdriver.Chrome('./chromedriver')yielddriver\n\n¬†¬†¬†¬†driver.quit()deftest_search_python(driver):driver.get(\"https://www.python.org/\")search_bar=driver.find_element(By.NAME,\"q\")search_bar.send_keys(\"Python\")search_bar.send_keys(Keys.RETURN)assert\"Python\"indriver.titleCopiedExplanation:pytest.fixture():Defines a fixture that sets up and tears down resources. The scope=‚Äùmodule‚Äù ensures the fixture is run once per module.yield:Provides the driver instance to the test function and performs cleanup after the test completes.assert:Checks that the condition is met. pytest will report the assertion failure if theRun Selenium Python Tests on Real DevicesSelenium Python ResourcesSelenium Python Tutorial (with Example)Page Object Model and Page Factory in Selenium PythonUnderstanding ExpectedConditions in SeleniumUnderstanding Role of Thread.sleep() in SeleniumHeadless Browser Testing With Selenium PythonHow to install GeckoDriver for Selenium Python?How to perform Web Scraping using Selenium and PythonHow to Create and Use Action Class in Selenium PythonHow to download a file using Selenium and PythonHow to Press Enter without Element in Selenium Python?UI Automation using Python and Selenium: TutorialGet Current URL in Selenium using Python: TutorialBest Practices using Selenium WebDriver with PythonHere are five best practices for using Selenium WebDriver with Python:Use Explicit Waits:Prefer explicit waits over implicit waits to handle dynamic content. Explicit waits ensure that your script interacts with elements only when they are ready, reducing the chances of encountering timing issues.Organize Tests with Frameworks:Integrate Selenium tests with testing frameworks like unittest or pytest to structure your test cases, manage setup and teardown, and generate detailed test reports.Use Page Object Model (POM):Implement the Page Object Model to separate test logic from page-specific code. This design pattern promotes code reusability, maintainability, and easier updates.Handle Exceptions Carefully:Implement error handling and logging to manage unexpected situations, such as element not found or timeout errors. This helps in debugging and provides insights into test failures.Optimize Browser Performance:Run tests in headless mode or use browser profiles to speed up test execution and reduce resource consumption. Also, ensure that browser drivers are up-to-date for compatibility and performance improvements.Why run Selenium Python Tests on BrowserStack Real Device Cloud?Running Selenium Python tests on BrowserStack‚Äôs Real Device Cloud offers numerous advantages that significantly enhance testing efficiency and effectiveness.BrowserStack provides access to a wide range of real devices and browsers, ensuring that tests reflect real-world scenarios and uncover device-specific issues. The platform supports scalable parallel execution, allowing multiple tests to run simultaneously across various configurations, which accelerates the development cycle.Cross-platform testing on BrowserStack ensures consistent application performance across different environments. Additionally, it offers real-time debugging features such as live logs, screenshots, and video recordings, which aid in quick troubleshooting.Seamless integration with CI/CD pipelines further automates the testing process, enabling tests to run on every code change and providing immediate feedback on application quality. Overall, BrowserStack Automate enables comprehensive, efficient, and reliable testing, fostering continuous development and deployment.Talk to an ExpertTagsPythonSeleniumOn This PageOn This PageWhy do Developers prefer Python for writing Selenium Test Scripts?Getting Started with Selenium PythonSelenium Python Example: How to run your first Test?Interacting with Common Elements in SeleniumNavigate through HTML DOM ElementsStep 1. Locate and Interact with Navigation LinksStep 2. Access and Interact with Header SectionsStep 3. Interact with Forms and Input FieldsNavigate through Windows and FramesHandling WaitsAssertions and ValidationsHandling Alerts and Pop-upsCleanup and TeardownTesting Framework Integration1. Integrate with unittest Framework2. Integrate with pytest FrameworkSelenium Python ResourcesBest Practices using Selenium WebDriver with PythonWhy run Selenium Python Tests on BrowserStack Real Device Cloud?63,000+ViewsRelated GuidesHow to Create and Use Action Class in Selenium PythonActions class is an ability provided by Selenium for handling keyboard and mouse events. Learn how t...Learn MoreDecember 19, 20227 min readHow to Double Click on an Element in Selenium Python?Learn more about double click in Selenium Python, which assists QA who need to automate this double-...Learn MoreMarch 1, 20238 min readHow to Press Enter without Element in Selenium Python?Learn how to press enter in Selenium with the help of send_keys() function in Selenium Python in thi...Learn MoreJune 3, 20247 min readView all guidesElevate Your Testing ExpertiseJoin expert-led webinars on software testing and stay updated with the latest trends and techniques.Register Now!Test Automation on Real Devices & BrowsersTry BrowserStack Automate for Automation Testing for websites on 3500+ real Devices & Browser. Seamlessly Integrate with Frameworks to run parallel tests and get reports on custom dashboardsContact SalesHow to Create and Use Action Class in Selenium PythonActions class is an ability provided by Selenium for handling keyboard and mouse events. Learn how t...Learn MoreDecember 19, 20227 min readHow to Double Click on an Element in Selenium Python?Learn more about double click in Selenium Python, which assists QA who need to automate this double-...Learn MoreMarch 1, 20238 min readHow to Press Enter without Element in Selenium Python?Learn how to press enter in Selenium with the help of send_keys() function in Selenium Python in thi...Learn MoreJune 3, 20247 min read\n",
      "additional_data": {
        "action_params": "{'include_links': False}",
        "duration_ms": 181.117,
        "page_changed": false,
        "previous_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "previous_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "new_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "new_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "element_details": {},
        "post_action_element_details": {}
      }
    },
    {
      "timestamp": "2025-03-12T15:01:28.568062",
      "action_type": "done",
      "phase": "pre_action",
      "element_info": {},
      "text": "The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.",
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test"
    },
    {
      "timestamp": "2025-03-12T15:01:28.575542",
      "action_type": "done",
      "phase": "post_action",
      "element_info": {},
      "text": "The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.",
      "current_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
      "result": "The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.",
      "additional_data": {
        "action_params": "{'text': 'The extracted page is a comprehensive tutorial on using Selenium with Python. It provides an introduction to Selenium as an open-source automation testing tool and explains why Python is a popular choice for writing Selenium test scripts due to its simplicity and readability. The tutorial covers topics such as setting up Selenium with Python, running your first test, interacting with web elements, handling waits, and managing multiple windows or frames. It also discusses using testing frameworks like unittest and pytest for better test management, and highlights the advantages of running Selenium tests on BrowserStack for real device testing.'}",
        "duration_ms": 3.0469999999999997,
        "page_changed": false,
        "previous_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "previous_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "new_url": "https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test",
        "new_title": "Selenium Python Tutorial (with Example) | BrowserStack",
        "element_details": {},
        "post_action_element_details": {}
      }
    }
  ]
}